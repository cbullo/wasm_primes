load("@emsdk//emscripten_toolchain:wasm_rules.bzl", "wasm_cc_binary")

EM_COMPILER_FLAGS = [
    #"-O0",
    "-O3",
    "-sWASM_WORKERS",
    "-pthread",
    #"-g",
]

EM_LINKER_FLAGS = [
    #"-O0",
    "-O3",
    "-sPTHREAD_POOL_SIZE=16",
    "-sWASM_WORKERS",
    "-pthread",
    "-sALLOW_BLOCKING_ON_MAIN_THREAD=0",
    "-sASYNCIFY",
    "-sEXPORTED_RUNTIME_METHODS=['addFunction']",
    "-sALLOW_TABLE_GROWTH",
    #"-sASSERTIONS=2",
    #"-g",
    #"-sEXCEPTION_DEBUG=1"
]

cc_library(
    name = "primes",
    srcs = [
        "primes.cc",
        "primes_worker.h",
        "ring_buffer.h",
    ],
    hdrs = ["primes.h"],
    cxxopts = select({
        "@platforms//cpu:wasm32": EM_COMPILER_FLAGS,
        "//conditions:default": [],
    }),
    linkopts = select({
        "@platforms//cpu:wasm32": EM_LINKER_FLAGS,
        "//conditions:default": [],
    }),
)

# This target is only intended for WASM
cc_binary(
    name = "primes_bin",
    srcs = ["main.cc"],
    cxxopts = select({
        "@platforms//cpu:wasm32": EM_COMPILER_FLAGS,
        "//conditions:default": [],
    }),
    linkopts = select({
        "@platforms//cpu:wasm32": EM_LINKER_FLAGS,
        "//conditions:default": [],
    }),
    target_compatible_with = ["@platforms//cpu:wasm32"],
    deps = [":primes"],
)

cc_test(
    name = "primes_test",
    srcs = ["test.cc"],
    deps = [
        ":primes",
        "@googletest//:gtest",
        "@googletest//:gtest_main",
    ],
)

cc_binary(
    name = "primes_benchmark",
    srcs = ["benchmark.cc"],
    deps = [
        ":primes",
    ],
)

wasm_cc_binary(
    name = "primes_bin_wasm",
    cc_target = ":primes_bin",
    threads = "emscripten",
    visibility = ["//visibility:public"],
)
